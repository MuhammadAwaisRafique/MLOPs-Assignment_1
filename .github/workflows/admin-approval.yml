name: Admin Approval Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ dev, test, master ]

jobs:
  admin-approval:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get PR information
      id: pr-info
      run: |
        echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
        echo "PR_AUTHOR=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
        echo "PR_BASE=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
        echo "PR_HEAD=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
        
    - name: Check if admin approval is required
      id: check-admin
      run: |
        # List of admin usernames (should be configured as secrets)
        ADMIN_USERS="${{ secrets.ADMIN_USERS }}"
        PR_AUTHOR="${{ steps.pr-info.outputs.PR_AUTHOR }}"
        PR_BASE="${{ steps.pr-info.outputs.PR_BASE }}"
        
        echo "Admin users: $ADMIN_USERS"
        echo "PR author: $PR_AUTHOR"
        echo "Target branch: $PR_BASE"
        
        # Check if PR author is an admin
        if echo "$ADMIN_USERS" | grep -q "$PR_AUTHOR"; then
          echo "ADMIN_SELF_APPROVAL=true" >> $GITHUB_OUTPUT
          echo "‚úÖ PR author is an admin - self-approval allowed"
        else
          echo "ADMIN_SELF_APPROVAL=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è PR author is not an admin - admin approval required"
        fi
        
        # Check if target branch requires admin approval
        if [[ "$PR_BASE" == "master" ]]; then
          echo "ADMIN_APPROVAL_REQUIRED=true" >> $GITHUB_OUTPUT
          echo "üîí Master branch requires admin approval"
        else
          echo "ADMIN_APPROVAL_REQUIRED=false" >> $GITHUB_OUTPUT
          echo "üìù $PR_BASE branch requires standard review"
        fi
        
    - name: Notify admin of pending approval
      if: steps.check-admin.outputs.ADMIN_APPROVAL_REQUIRED == 'true'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "üîí Admin Approval Required - PR #${{ steps.pr-info.outputs.PR_NUMBER }}"
        to: ${{ secrets.ADMIN_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        body: |
          <h2>Admin Approval Required</h2>
          <p>A pull request requires your approval:</p>
          <ul>
            <li><strong>PR #${{ steps.pr-info.outputs.PR_NUMBER }}</strong></li>
            <li><strong>Author:</strong> ${{ steps.pr-info.outputs.PR_AUTHOR }}</li>
            <li><strong>From:</strong> ${{ steps.pr-info.outputs.PR_HEAD }}</li>
            <li><strong>To:</strong> ${{ steps.pr-info.outputs.PR_BASE }}</li>
            <li><strong>URL:</strong> <a href="${{ github.event.pull_request.html_url }}">${{ github.event.pull_request.html_url }}</a></li>
          </ul>
          
          <h3>Next Steps:</h3>
          <ol>
            <li>Review the code changes</li>
            <li>Check that all status checks pass</li>
            <li>Approve the pull request</li>
            <li>Merge when ready</li>
          </ol>
          
          <p><strong>Note:</strong> This is an automated notification from the MLOps CI/CD pipeline.</p>
          
    - name: Comment on PR with approval status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const isAdminApprovalRequired = '${{ steps.check-admin.outputs.ADMIN_APPROVAL_REQUIRED }}' === 'true';
          const isAdminSelfApproval = '${{ steps.check-admin.outputs.ADMIN_SELF_APPROVAL }}' === 'true';
          
          let comment = '## üîç Pull Request Review Status\n\n';
          
          if (isAdminApprovalRequired) {
            if (isAdminSelfApproval) {
              comment += '‚úÖ **Admin Self-Approval**: PR author is an admin - self-approval allowed\n\n';
            } else {
              comment += 'üîí **Admin Approval Required**: This PR requires admin approval before merging\n\n';
              comment += 'üìß Admin has been notified via email\n\n';
            }
          } else {
            comment += 'üìù **Standard Review**: This PR requires standard code review\n\n';
          }
          
          comment += `**Target Branch:** \`${{ steps.pr-info.outputs.PR_BASE }}\`\n`;
          comment += `**Author:** @${{ steps.pr-info.outputs.PR_AUTHOR }}\n\n`;
          
          comment += '### Required Checks:\n';
          comment += '- [ ] Code quality check (flake8)\n';
          comment += '- [ ] Unit tests\n';
          comment += '- [ ] Security scan\n';
          
          if ('${{ steps.pr-info.outputs.PR_BASE }}' === 'master') {
            comment += '- [ ] Integration tests\n';
            comment += '- [ ] Performance tests\n';
            comment += '- [ ] Docker build test\n';
          }
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: Check for required reviewers
      if: steps.check-admin.outputs.ADMIN_APPROVAL_REQUIRED == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const { data: reviews } = await github.rest.pulls.listReviews({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const adminUsers = '${{ secrets.ADMIN_USERS }}'.split(',');
          const approvedByAdmins = reviews
            .filter(review => review.state === 'APPROVED')
            .filter(review => adminUsers.includes(review.user.login));
          
          if (approvedByAdmins.length === 0) {
            console.log('‚ùå No admin approvals found');
            
            // Add a status check that will fail until admin approval
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: 'pending',
              target_url: context.payload.pull_request.html_url,
              description: 'Waiting for admin approval',
              context: 'admin-approval'
            });
          } else {
            console.log(`‚úÖ Admin approval found from: ${approvedByAdmins.map(r => r.user.login).join(', ')}`);
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: 'success',
              target_url: context.payload.pull_request.html_url,
              description: 'Admin approval received',
              context: 'admin-approval'
            });
          }

