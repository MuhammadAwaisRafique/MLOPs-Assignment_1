name: Unit Testing

on:
  push:
    branches: [ test ]
  pull_request:
    branches: [ test ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
        
    - name: Run unit tests
      run: |
        python -m pytest test_app.py -v --cov=app --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          
    - name: Test model loading
      run: |
        python -c "
        import joblib
        import sys
        
        try:
            model = joblib.load('imdb_logreg_model.pkl')
            vectorizer = joblib.load('tfidf_vectorizer.pkl')
            print('✅ Model and vectorizer loaded successfully')
            sys.exit(0)
        except Exception as e:
            print(f'❌ Error loading model: {e}')
            sys.exit(1)
        "
        
    - name: Test Flask app startup
      run: |
        python -c "
        from app import app
        import sys
        
        with app.test_client() as client:
            try:
                response = client.get('/health')
                if response.status_code == 200:
                    print('✅ Flask app starts successfully')
                    sys.exit(0)
                else:
                    print(f'❌ Health check failed with status: {response.status_code}')
                    sys.exit(1)
            except Exception as e:
                print(f'❌ Flask app startup error: {e}')
                sys.exit(1)
        "
        
    - name: Performance test
      run: |
        python -c "
        import time
        import requests
        from app import app
        
        with app.test_client() as client:
            # Test response time
            start_time = time.time()
            response = client.get('/health')
            end_time = time.time()
            
            response_time = end_time - start_time
            print(f'Health check response time: {response_time:.3f}s')
            
            if response_time > 5:
                print('❌ Response time too slow')
                exit(1)
            else:
                print('✅ Response time acceptable')
                exit(0)
        "

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Start Flask app
      run: |
        python app.py &
        sleep 10
        
    - name: Test API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:5000/health || exit 1
        
        # Test prediction endpoint
        curl -X POST http://localhost:5000/predict \
          -H "Content-Type: application/json" \
          -d '{"review": "This movie is fantastic!"}' || exit 1
        
        echo "✅ All integration tests passed"
